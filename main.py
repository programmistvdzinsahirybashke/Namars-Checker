from background import keep_alive
from telebot import types
from telebot import custom_filters
import time
import requests
from bs4 import BeautifulSoup
import json
from web3 import Web3
import telebot
import configure
import sqlite3
import datetime

bot = telebot.TeleBot(configure.config["token"], threaded=True, num_threads=300)
bot.add_custom_filter(custom_filters.TextMatchFilter())
bot.add_custom_filter(custom_filters.ChatFilter())


@bot.message_handler(commands=["start"])
def start(message, res=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É")
    markup.add(button1)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –≤ –±–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    def register_new_user(user_id, nickname, username):
        register_user = "INSERT OR IGNORE INTO test (user_id, nickname, username) VALUES (?, ?, ?)"
        columns = (user_id, nickname, username)
        cursor.execute(register_user, columns)
        conn.commit()

    us_id = message.from_user.id
    us_name = message.from_user.first_name
    username = message.from_user.username

    register_new_user(user_id=us_id, nickname=us_name, username=username)

    bot.reply_to(message, text="""*üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ Namars*
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚è∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –≤—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíú –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ @halavayahunt
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ùó –ò–Ω–æ–≥–¥–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ , –Ω–µ —Å–µ—Ä—á–∞–π—Ç–µ
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ùó –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /help
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ - `0xF757f3A0E4593daF5fe5777b2C6bA1D8a1ec6d44`
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
*üíú –°–ø–∞—Å–∏–±–æ! *
""", parse_mode="Markdown", reply_markup=markup)


@bot.message_handler(text=['–£–∑–Ω–∞—Ç—å –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É'])
def get_info(message):
    date = datetime.datetime.today()
    print("–ü–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç", message.from_user.first_name, ", –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ =",
          date.strftime('%H:%M:%S %m.%d '))
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ —á—Ç–æ —é–∑–µ—Ä —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ
    chat_id = -1001790926622
    user_id = message.from_user.id
    user_channel_status = bot.get_chat_member(chat_id, user_id)
    if user_channel_status.status == 'left':
        bot.send_message(message.chat.id, '* –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å @halavayahunt —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–ºüíú *',
                         parse_mode="Markdown")
    else:
        # –°–ø–æ—Ç
        response = requests.get("https://yobit.net/api/3/ticker/wrub_rur")
        soup = BeautifulSoup(response.text, "lxml")
        price_tag = soup.find("body")
        for data in price_tag:
            price_json = json.loads(data.string)

        response_spot = f"1 –≤—Ä–∞–±—á–∏–∫ –Ω–∞ —Å–ø–æ—Ç–µ = {str(price_json['wrub_rur']['last'])[0:5]} RUB"

        # DEFI
        response2 = requests.get("https://yobit.net/api/defi/info/wrub_rur")
        soup2 = BeautifulSoup(response2.text, "lxml")
        price_tag2 = soup2.find("body")
        for data in price_tag2:
            price_json2 = json.loads(data.string)

        response_defi = f"1 –≤—Ä–∞–±—á–∏–∫ –≤ DEFI = {price_json2['pools']['wrub_rur']['price1'][0:5]} RUB"

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –±–Ω–±
        wallet_address_namars = '0x0064838E894271F0f568DBa3b202C7A7F9723599'
        balance_namars = web3.eth.get_balance(wallet_address_namars)
        response_bnb_namars = f"–ë–∞–ª–∞–Ω—Å BNB Namars = {round(balance_namars / 10 ** 18, 3)} BNB"

        wallet_address_yobit = '0x097A40BF3bdA3058a8683990A15CEf5C2f1fd3D4'
        balance_yobit = web3.eth.get_balance(wallet_address_yobit)
        response_bnb_yobit = f"–ë–∞–ª–∞–Ω—Å BNB Yobit = {round(balance_yobit / 10 ** 18, 3)} BNB"

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –≤—Ä–∞–±—á–∏–∫–∞
        # –í–≤–æ–¥–∏–º –∞–±–∏ —Ç–æ–∫–µ–Ω–∞
        WRUB_ABI = json.loads(
            '''[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"uint256","name":"decimals_","type":"uint256"},{"internalType":"uint256","name":"initialBalance_","type":"uint256"},{"internalType":"address","name":"tokenOwner","type":"address"},{"internalType":"address payable","name":"feeReceiver_","type":"address"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"Optimization","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"recoverERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]''')

        # WRUB —Ç–æ–∫–µ–Ω
        wrub_contract_address = '0x72f74Fb5382a7A49B5c6e8437A04D65bf2ff5736'

        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        wrub_contract = web3.eth.contract(wrub_contract_address, abi=WRUB_ABI)

        balance_of_token = wrub_contract.functions.balanceOf(wallet_address_namars).call()  # in Wei
        wrub_balance = balance_of_token / 10 ** 18

        def format_number(number):
            number = str(number)[::-1]
            result = ''
            for i, num in enumerate(number):
                if i % 3 == 0:
                    result += '.'
                result += num
            result = result[::-1][:-1]
            return result

        wrub_balance_formatted = format_number(int(wrub_balance))

        cursor.execute("SELECT status_text FROM test WHERE user_id = ?", (702999620,))
        response_withdrawals = cursor.fetchone()
        response_withdrawals = response_withdrawals[0]
        response_wrub_count = f"–ë–∞–ª–∞–Ω—Å –≤—Ä–∞–±—á–∏–∫–æ–≤ = {wrub_balance_formatted} WRUB"

        bot.send_message(message.chat.id, f""" üî• * –û–±—Å—Ç–∞–Ω–æ–≤–∫–∞ Namars * üî•
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ {response_wrub_count}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üèÜ {response_bnb_namars}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üèÜ {response_bnb_yobit}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìà {response_spot}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìà {response_defi} 
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíµ –°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–æ–≤ - {response_withdrawals}
""", parse_mode="Markdown")


@bot.message_handler(commands=["help"])
def request_group(message):
    bot.send_message(message.chat.id, text="""*üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ Namars*
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚è∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –≤—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíú –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Ç–∞–∫–∏–º –∂–µ –∞–±—É–∑–µ—Ä–æ–º –Ω–∞–º–∞—Ä—Å–∞ –Ω–∞ —á–∏—Å—Ç–æ–º —ç–Ω—Ç—É–∑–∏–∞–∑–º–µ, —Ç–∞–∫ —á—Ç–æ –Ω–µ —Å–µ—Ä—á–∞–π—Ç–µ –µ—Å–ª–∏ –±—É–¥—É—Ç –∫–∞–∫–∏–µ —Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíú –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ @halavayahunt
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ùó –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –ø—Ä–æ–ø–∏—Å–∞–≤ /start
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚úÖ –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç @huntschat –ª–∏–±–æ –≤ –ª—Å @ladno9867
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–≤ –ª—é–±—É—é –º–æ–Ω–µ—Ç—É –≤ –ª—é–±–æ–π EVM —Å–µ—Ç–∏ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å - 
`0xF757f3A0E4593daF5fe5777b2C6bA1D8a1ec6d44`
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
*üíú –°–ø–∞—Å–∏–±–æ! *
""", parse_mode="Markdown", )

@bot.message_handler(chat_id=[702999620], commands=['cmd'])
def show_admin_commands(message):
    bot.send_message(message.chat.id,
                     "‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å - /set_status\n\n"
                     "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ - /set_message\n\n"
                     "üíé –ü–æ—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /count_users\n\n"
                     "‚ùó –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É - /send_notification")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(chat_id=[702999620], commands=['set_message'])
def admin_update_notification(message):
    def update_notification_text(message_text: str):
        us_id = message.from_user.id
        sqlite_update_query = 'UPDATE test SET message_text = ? WHERE user_id = ?'
        column_values = (message_text, us_id)
        cursor.execute(sqlite_update_query, column_values)
        conn.commit()

    def update_text(message):
        new_text = message.text

        def input_text(message):
            msg = bot.reply_to(message)
            bot.register_next_step_handler(msg)
            new_text = message.text

        update_notification_text(message_text=new_text)
        cursor.execute("SELECT message_text FROM test WHERE user_id = ?", (702999620,))
        notification_text = cursor.fetchone()
        notification_text = notification_text[0]
        bot.send_message(message.chat.id, text=f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n{notification_text}",
                         parse_mode="Markdown")

    get_text = bot.reply_to(message, "‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ")
    bot.register_next_step_handler(get_text, update_text)

# –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(chat_id=[702999620], commands=['send_notification'])
def admin_send_notification(message):
    bot.send_message(message.chat.id, "–í–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
    cursor.execute("SELECT user_id, message_text FROM test")
    matches = cursor.fetchall()
    d = dict(matches)

    amount_message = 0
    amount_bad = 0
    start_time = time.time()

    for user_id, message_text in d.items():
        try:
            cursor.execute("SELECT message_text FROM test WHERE user_id = ?", (702999620,))
            notification_text = cursor.fetchone()
            notification_text = notification_text[0]
            bot.send_message(user_id, text=notification_text, parse_mode="Markdown")
            amount_message += 1
        except:
            amount_bad += 1
            pass

    sending_time = time.time() - start_time
    bot.send_message(702999620,
                     f'‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n'
                     f'‚ùó–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_message}\n'
                     f'‚ùó–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {amount_bad}\n'
                     f'üïê–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - {sending_time} —Å–µ–∫—É–Ω–¥'
                     )

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–æ–≤
@bot.message_handler(chat_id=[702999620], commands=['set_status'])
def admin_update_status(message):
    def update_status_text(status_text: str):
        us_id = message.from_user.id
        sqlite_update_query = 'UPDATE test SET status_text = ? WHERE user_id = ?'
        column_values = (status_text, us_id)
        cursor.execute(sqlite_update_query, column_values)
        conn.commit()

    def update_status(message):
        new_status_text = message.text

        def input_status(message):
            msg = bot.reply_to(message)
            bot.register_next_step_handler(msg)
            new_status_text = message.text

        bot.reply_to(message, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å: {new_status_text}")
        update_status_text(status_text=new_status_text)

    get_status = bot.reply_to(message, "‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ")
    bot.register_next_step_handler(get_status, update_status)

# –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π –≤ –±–æ—Ç–µ
@bot.message_handler(chat_id=[702999620], commands=['count_users'])
def admin_count_users(message):
    bot.send_message(message.chat.id, "–í–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
    cursor.execute("SELECT user_id FROM test")
    matches = cursor.fetchall()
    users = list(matches)
    count_users = 0

    for user in users:
        if user:
            count_users += 1

    bot.send_message(702999620, f'‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {count_users}')

@bot.message_handler(commands=['set_message', 'set_status', 'count_users', 'send_notification', 'cmd'])
def not_admin(message):
    bot.send_message(message.chat.id, "–í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")


if __name__ == "__main__":
    while True:
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
            conn = sqlite3.connect('db_main.db', check_same_thread=False)
            cursor = conn.cursor()

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC
            bsc_rpc = 'https://bsc.publicnode.com'
            web3 = Web3(Web3.HTTPProvider(endpoint_uri=bsc_rpc))
            print(f"Web3 is connected: {web3.is_connected()}")
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            keep_alive()
            bot.polling(skip_pending=True, none_stop=True)

        except Exception as e:
            telebot.logger.error(e)
            time.sleep(5)
